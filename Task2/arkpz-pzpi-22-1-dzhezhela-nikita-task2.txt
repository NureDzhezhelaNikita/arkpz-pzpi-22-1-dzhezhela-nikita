Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії










ЗВІТ
до лабораторного заняття з дисципліни
"Аналіз та рефакторинг коду"
на тему "Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу"








Виконав ст. гр ПЗПІ-22-1
Джежела Нікіта Русланович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович










Харків 2024
1 МЕТА
Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
2 ЗАВДАННЯ
1. Розробити будову програмної системи.
2. Створити UML діаграму прецедентів для серверної частини системи.
3. Створити ER діаграму даних.
4. Розробити базу даних (БД) програмної системи.
5. Створити діаграму структури БД.
6. Розробити функції роботи з БД (ORM або CoRM тощо).
7. Розробити API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами.
8. Створити специфікацію розробленого API.
9. Створити програмну реалізацію розробленого API та функцій роботи з БД.
3 ХІД РОБОТИ
Архітектура програмної системи складатиметься з таких компонентів:
Серверна частина реалізує більшість бізнес-логіки, надає прикладний програмний інтерфейс. Реалізація використовує Serverless платформу Supabase. Зв’язок з клієнтськими застосунками та IoT клієнтом відбувається за допомогою HTTP(s) та WebSocket.
СУБД використовується Supabase PostgreSQL-like реляційна база даних. Для доступу до СУБД використовується Supabase ORM. 
  

Рисунок 1 – UML Діаграма 
  

Рисунок 2 – ER Діаграма 
На ER діаграмі відображено основні сутності, їх атрибути та зв’язки.
  

Рисунок 3 – Діаграма структури БД 
На діаграмі структури БД зображено головні та зовнішні ключі, типи та назви атрибутів.
  

Рисунок 4 – Реалізована БД
Враховуючи прецеденти серверної частини, створюємо специфікацію API (додаток А.) та реалізуємо її за допомогою мови Typescript.
________________
ВИСНОВКИ
Розробив базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
Посилання на YouTube відео: https://youtu.be/s0HXx_1Je34


________________


ДОДАТОК А
Специфікація API
Базовий URL:
https://[PROJECT_REF].supabase.co/functions/v1


Endpoints:
IOT WebSocket: /iot-ws
Метод: 
WebSocket З'єднання (апгрейд до Websocket протоколу через HTTP(s))
Опис: Обробляє комунікацію IoT пристроїв у реальному часі
Повідомлення:
Кожне повідомлення містить в собі 3 частини: токен авторизації IoT пристрою, тип повідомлення та корисне навантаження.
Типи повідомлень:
VEHICLE_STATUS – Повідомлення для передачі поточного стану автомобіля від IoT пристрою до сервера.
SET_VEHICLE_STATUS – Повідомлення від сервера до клієнта, про зміну стану автомобіля. Може містити ідентифікатор поточної сесії.
CAR_INTERNAL – Повідомлення від сервера до клієнта про необхідність виконання команди внутрішніх систем автомобіля. (закрити двері, закрити вікна тощо.) Тип внутрішньої команди та додаткова інформація передається у якості корисного навантаження


Ролі: /roles
* GET: Отримати всі ролі
Відповідь: Масив об'єктів ролей
* POST: Створити нову роль
Тіло: { name: string }
Відповідь: Створений об'єкт ролі
* PUT: Оновити існуючу роль
Тіло: { id: string, name: string }
Відповідь: Оновлений об'єкт ролі
* DELETE: Видалити роль
Параметри запиту: id
Відповідь: Немає вмісту (204)


Поїздки: /trips
* GET: Отримати всі поїздки
Відповідь: Масив об'єктів поїздок
* POST: Створити нову поїздку
Тіло: { user_id: string, vehicle_id: string, інші деталі поїздки }
Відповідь: Створений об'єкт поїздки
* PUT: Оновити існуючу поїздку
Тіло: { id: string, оновлення поїздки }
Відповідь: Оновлений об'єкт поїздки
* DELETE: Видалити поїздку
Параметри запиту: id
Відповідь: Немає вмісту (204)


Користувачі: /users
* GET: Отримати всіх користувачів
Відповідь: Масив об'єктів користувачів
* POST: Створити нового користувача
Тіло: { email: string, first_name: string, last_name: string, password: string, role_id: string }
Відповідь: Створений об'єкт користувача
* PUT: Оновити існуючого користувача
Тіло: { id: string, оновлення користувача }
Відповідь: Оновлений об'єкт користувача
* DELETE: Видалити користувача
Параметри запиту: id
Відповідь: Немає вмісту (204)


Статуси транспортних засобів: /vehicle-statuses
* GET: Отримати всі статуси транспортних засобів
Відповідь: Масив об'єктів статусів
* POST: Створити новий статус
Тіло: { vehicle_id: string, fuel: number, is_locked: boolean, is_started: boolean, latitude: number, longitude: number }
Відповідь: Створений об'єкт статусу
* PUT: Оновити існуючий статус
Тіло: { id: string, оновлення статусу }
Відповідь: Оновлений об'єкт статусу
* DELETE: Видалити статус
Параметри запиту: id
Відповідь: Немає вмісту (204)


Типи транспортних засобів: /vehicle-types
* GET: Отримати всі типи транспортних засобів
Відповідь: Масив об'єктів типів
* POST: Створити новий тип
Тіло: { make: string, model: string, engine: string, transmission: string }
Відповідь: Створений об'єкт типу
* PUT: Оновити існуючий тип
Тіло: { id: string, оновлення типу }
Відповідь: Оновлений об'єкт типу
* DELETE: Видалити тип
Параметри запиту: id
Відповідь: Немає вмісту (204)


Транспортні засоби: /vehicles
* GET: Отримати всі транспортні засоби
Відповідь: Масив об'єктів транспортних засобів
* POST: Створити новий транспортний засіб
Тіло: { vin: string, vehicle_type_id: string, production_year?: number, mileage_start?: number }
Відповідь: Створений об'єкт транспортного засобу
* PUT: Оновити існуючий транспортний засіб
Тіло: { id: string, оновлення транспортного засобу }
Відповідь: Оновлений об'єкт транспортного засобу
* DELETE: Видалити транспортний засіб
Параметри запиту: id
Відповідь: Немає вмісту (204)


Загальні заголовки відповідей
Content-Type: application/json
CORS заголовки увімкнені для всіх кінцевих точок


Відповіді про помилки
Всі кінцеві точки повертають узгоджені відповіді про помилки:
400: Поганий запит (Відсутні обов'язкові параметри)
405: Метод не дозволений
500: Внутрішня помилка сервера
Формат відповіді про помилку:
{
"error": "Опис повідомлення про помилку"
}